//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace GDMVisualization.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetExperimentGraph", ReplyAction="http://tempuri.org/IService1/GetExperimentGraphResponse")]
        System.IAsyncResult BeginGetExperimentGraph(System.AsyncCallback callback, object asyncState);
        
        string EndGetExperimentGraph(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetSessionVariable", ReplyAction="http://tempuri.org/IService1/GetSessionVariableResponse")]
        System.IAsyncResult BeginGetSessionVariable(System.AsyncCallback callback, object asyncState);
        
        string EndGetSessionVariable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetSolutionGraph", ReplyAction="http://tempuri.org/IService1/GetSolutionGraphResponse")]
        System.IAsyncResult BeginGetSolutionGraph(System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetSolutionGraph(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetUseSolutionGraph", ReplyAction="http://tempuri.org/IService1/GetUseSolutionGraphResponse")]
        System.IAsyncResult BeginGetUseSolutionGraph(System.AsyncCallback callback, object asyncState);
        
        string EndGetUseSolutionGraph(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetCurrentExperimentID", ReplyAction="http://tempuri.org/IService1/GetCurrentExperimentIDResponse")]
        System.IAsyncResult BeginGetCurrentExperimentID(System.AsyncCallback callback, object asyncState);
        
        int EndGetCurrentExperimentID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/InsertIntoExperimentActions", ReplyAction="http://tempuri.org/IService1/InsertIntoExperimentActionsResponse")]
        System.IAsyncResult BeginInsertIntoExperimentActions(int ExperimentID, int PersonID, string VertexID, string Color, System.DateTime EventTime, System.AsyncCallback callback, object asyncState);
        
        bool EndInsertIntoExperimentActions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/AddParticipant", ReplyAction="http://tempuri.org/IService1/AddParticipantResponse")]
        System.IAsyncResult BeginAddParticipant(object turkId, System.AsyncCallback callback, object asyncState);
        
        int EndAddParticipant(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/setSessionVariable", ReplyAction="http://tempuri.org/IService1/setSessionVariableResponse")]
        System.IAsyncResult BeginsetSessionVariable(string key, string value, System.AsyncCallback callback, object asyncState);
        
        object EndsetSessionVariable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/InsertExperimentGraph", ReplyAction="http://tempuri.org/IService1/InsertExperimentGraphResponse")]
        System.IAsyncResult BeginInsertExperimentGraph(string graph_xml, System.AsyncCallback callback, object asyncState);
        
        int EndInsertExperimentGraph(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/SolvedProblemGraph", ReplyAction="http://tempuri.org/IService1/SolvedProblemGraphResponse")]
        System.IAsyncResult BeginSolvedProblemGraph(int ParticipantID, bool Solved, System.DateTime SolvedTime, System.AsyncCallback callback, object asyncState);
        
        bool EndSolvedProblemGraph(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/SolutionAcceptancePartial", ReplyAction="http://tempuri.org/IService1/SolutionAcceptancePartialResponse")]
        System.IAsyncResult BeginSolutionAcceptancePartial(int ParticipantID, int ExperimentID, System.DateTime Date, bool AcceptedSolution, System.AsyncCallback callback, object asyncState);
        
        bool EndSolutionAcceptancePartial(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/PerformBulkCopy", ReplyAction="http://tempuri.org/IService1/PerformBulkCopyResponse")]
        System.IAsyncResult BeginPerformBulkCopy(System.AsyncCallback callback, object asyncState);
        
        bool EndPerformBulkCopy(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : GDMVisualization.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetExperimentGraphCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetExperimentGraphCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSessionVariableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSessionVariableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSolutionGraphCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSolutionGraphCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUseSolutionGraphCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUseSolutionGraphCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCurrentExperimentIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCurrentExperimentIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertIntoExperimentActionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertIntoExperimentActionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddParticipantCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddParticipantCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class setSessionVariableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public setSessionVariableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertExperimentGraphCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertExperimentGraphCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SolvedProblemGraphCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SolvedProblemGraphCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SolutionAcceptancePartialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SolutionAcceptancePartialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PerformBulkCopyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PerformBulkCopyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<GDMVisualization.ServiceReference1.IService1>, GDMVisualization.ServiceReference1.IService1 {
        
        private BeginOperationDelegate onBeginGetExperimentGraphDelegate;
        
        private EndOperationDelegate onEndGetExperimentGraphDelegate;
        
        private System.Threading.SendOrPostCallback onGetExperimentGraphCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSessionVariableDelegate;
        
        private EndOperationDelegate onEndGetSessionVariableDelegate;
        
        private System.Threading.SendOrPostCallback onGetSessionVariableCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSolutionGraphDelegate;
        
        private EndOperationDelegate onEndGetSolutionGraphDelegate;
        
        private System.Threading.SendOrPostCallback onGetSolutionGraphCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUseSolutionGraphDelegate;
        
        private EndOperationDelegate onEndGetUseSolutionGraphDelegate;
        
        private System.Threading.SendOrPostCallback onGetUseSolutionGraphCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCurrentExperimentIDDelegate;
        
        private EndOperationDelegate onEndGetCurrentExperimentIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetCurrentExperimentIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertIntoExperimentActionsDelegate;
        
        private EndOperationDelegate onEndInsertIntoExperimentActionsDelegate;
        
        private System.Threading.SendOrPostCallback onInsertIntoExperimentActionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddParticipantDelegate;
        
        private EndOperationDelegate onEndAddParticipantDelegate;
        
        private System.Threading.SendOrPostCallback onAddParticipantCompletedDelegate;
        
        private BeginOperationDelegate onBeginsetSessionVariableDelegate;
        
        private EndOperationDelegate onEndsetSessionVariableDelegate;
        
        private System.Threading.SendOrPostCallback onsetSessionVariableCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertExperimentGraphDelegate;
        
        private EndOperationDelegate onEndInsertExperimentGraphDelegate;
        
        private System.Threading.SendOrPostCallback onInsertExperimentGraphCompletedDelegate;
        
        private BeginOperationDelegate onBeginSolvedProblemGraphDelegate;
        
        private EndOperationDelegate onEndSolvedProblemGraphDelegate;
        
        private System.Threading.SendOrPostCallback onSolvedProblemGraphCompletedDelegate;
        
        private BeginOperationDelegate onBeginSolutionAcceptancePartialDelegate;
        
        private EndOperationDelegate onEndSolutionAcceptancePartialDelegate;
        
        private System.Threading.SendOrPostCallback onSolutionAcceptancePartialCompletedDelegate;
        
        private BeginOperationDelegate onBeginPerformBulkCopyDelegate;
        
        private EndOperationDelegate onEndPerformBulkCopyDelegate;
        
        private System.Threading.SendOrPostCallback onPerformBulkCopyCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetExperimentGraphCompletedEventArgs> GetExperimentGraphCompleted;
        
        public event System.EventHandler<GetSessionVariableCompletedEventArgs> GetSessionVariableCompleted;
        
        public event System.EventHandler<GetSolutionGraphCompletedEventArgs> GetSolutionGraphCompleted;
        
        public event System.EventHandler<GetUseSolutionGraphCompletedEventArgs> GetUseSolutionGraphCompleted;
        
        public event System.EventHandler<GetCurrentExperimentIDCompletedEventArgs> GetCurrentExperimentIDCompleted;
        
        public event System.EventHandler<InsertIntoExperimentActionsCompletedEventArgs> InsertIntoExperimentActionsCompleted;
        
        public event System.EventHandler<AddParticipantCompletedEventArgs> AddParticipantCompleted;
        
        public event System.EventHandler<setSessionVariableCompletedEventArgs> setSessionVariableCompleted;
        
        public event System.EventHandler<InsertExperimentGraphCompletedEventArgs> InsertExperimentGraphCompleted;
        
        public event System.EventHandler<SolvedProblemGraphCompletedEventArgs> SolvedProblemGraphCompleted;
        
        public event System.EventHandler<SolutionAcceptancePartialCompletedEventArgs> SolutionAcceptancePartialCompleted;
        
        public event System.EventHandler<PerformBulkCopyCompletedEventArgs> PerformBulkCopyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GDMVisualization.ServiceReference1.IService1.BeginGetExperimentGraph(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetExperimentGraph(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string GDMVisualization.ServiceReference1.IService1.EndGetExperimentGraph(System.IAsyncResult result) {
            return base.Channel.EndGetExperimentGraph(result);
        }
        
        private System.IAsyncResult OnBeginGetExperimentGraph(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((GDMVisualization.ServiceReference1.IService1)(this)).BeginGetExperimentGraph(callback, asyncState);
        }
        
        private object[] OnEndGetExperimentGraph(System.IAsyncResult result) {
            string retVal = ((GDMVisualization.ServiceReference1.IService1)(this)).EndGetExperimentGraph(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetExperimentGraphCompleted(object state) {
            if ((this.GetExperimentGraphCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetExperimentGraphCompleted(this, new GetExperimentGraphCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetExperimentGraphAsync() {
            this.GetExperimentGraphAsync(null);
        }
        
        public void GetExperimentGraphAsync(object userState) {
            if ((this.onBeginGetExperimentGraphDelegate == null)) {
                this.onBeginGetExperimentGraphDelegate = new BeginOperationDelegate(this.OnBeginGetExperimentGraph);
            }
            if ((this.onEndGetExperimentGraphDelegate == null)) {
                this.onEndGetExperimentGraphDelegate = new EndOperationDelegate(this.OnEndGetExperimentGraph);
            }
            if ((this.onGetExperimentGraphCompletedDelegate == null)) {
                this.onGetExperimentGraphCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetExperimentGraphCompleted);
            }
            base.InvokeAsync(this.onBeginGetExperimentGraphDelegate, null, this.onEndGetExperimentGraphDelegate, this.onGetExperimentGraphCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GDMVisualization.ServiceReference1.IService1.BeginGetSessionVariable(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSessionVariable(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string GDMVisualization.ServiceReference1.IService1.EndGetSessionVariable(System.IAsyncResult result) {
            return base.Channel.EndGetSessionVariable(result);
        }
        
        private System.IAsyncResult OnBeginGetSessionVariable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((GDMVisualization.ServiceReference1.IService1)(this)).BeginGetSessionVariable(callback, asyncState);
        }
        
        private object[] OnEndGetSessionVariable(System.IAsyncResult result) {
            string retVal = ((GDMVisualization.ServiceReference1.IService1)(this)).EndGetSessionVariable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSessionVariableCompleted(object state) {
            if ((this.GetSessionVariableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSessionVariableCompleted(this, new GetSessionVariableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSessionVariableAsync() {
            this.GetSessionVariableAsync(null);
        }
        
        public void GetSessionVariableAsync(object userState) {
            if ((this.onBeginGetSessionVariableDelegate == null)) {
                this.onBeginGetSessionVariableDelegate = new BeginOperationDelegate(this.OnBeginGetSessionVariable);
            }
            if ((this.onEndGetSessionVariableDelegate == null)) {
                this.onEndGetSessionVariableDelegate = new EndOperationDelegate(this.OnEndGetSessionVariable);
            }
            if ((this.onGetSessionVariableCompletedDelegate == null)) {
                this.onGetSessionVariableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSessionVariableCompleted);
            }
            base.InvokeAsync(this.onBeginGetSessionVariableDelegate, null, this.onEndGetSessionVariableDelegate, this.onGetSessionVariableCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GDMVisualization.ServiceReference1.IService1.BeginGetSolutionGraph(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSolutionGraph(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] GDMVisualization.ServiceReference1.IService1.EndGetSolutionGraph(System.IAsyncResult result) {
            return base.Channel.EndGetSolutionGraph(result);
        }
        
        private System.IAsyncResult OnBeginGetSolutionGraph(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((GDMVisualization.ServiceReference1.IService1)(this)).BeginGetSolutionGraph(callback, asyncState);
        }
        
        private object[] OnEndGetSolutionGraph(System.IAsyncResult result) {
            byte[] retVal = ((GDMVisualization.ServiceReference1.IService1)(this)).EndGetSolutionGraph(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSolutionGraphCompleted(object state) {
            if ((this.GetSolutionGraphCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSolutionGraphCompleted(this, new GetSolutionGraphCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSolutionGraphAsync() {
            this.GetSolutionGraphAsync(null);
        }
        
        public void GetSolutionGraphAsync(object userState) {
            if ((this.onBeginGetSolutionGraphDelegate == null)) {
                this.onBeginGetSolutionGraphDelegate = new BeginOperationDelegate(this.OnBeginGetSolutionGraph);
            }
            if ((this.onEndGetSolutionGraphDelegate == null)) {
                this.onEndGetSolutionGraphDelegate = new EndOperationDelegate(this.OnEndGetSolutionGraph);
            }
            if ((this.onGetSolutionGraphCompletedDelegate == null)) {
                this.onGetSolutionGraphCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSolutionGraphCompleted);
            }
            base.InvokeAsync(this.onBeginGetSolutionGraphDelegate, null, this.onEndGetSolutionGraphDelegate, this.onGetSolutionGraphCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GDMVisualization.ServiceReference1.IService1.BeginGetUseSolutionGraph(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUseSolutionGraph(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string GDMVisualization.ServiceReference1.IService1.EndGetUseSolutionGraph(System.IAsyncResult result) {
            return base.Channel.EndGetUseSolutionGraph(result);
        }
        
        private System.IAsyncResult OnBeginGetUseSolutionGraph(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((GDMVisualization.ServiceReference1.IService1)(this)).BeginGetUseSolutionGraph(callback, asyncState);
        }
        
        private object[] OnEndGetUseSolutionGraph(System.IAsyncResult result) {
            string retVal = ((GDMVisualization.ServiceReference1.IService1)(this)).EndGetUseSolutionGraph(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUseSolutionGraphCompleted(object state) {
            if ((this.GetUseSolutionGraphCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUseSolutionGraphCompleted(this, new GetUseSolutionGraphCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUseSolutionGraphAsync() {
            this.GetUseSolutionGraphAsync(null);
        }
        
        public void GetUseSolutionGraphAsync(object userState) {
            if ((this.onBeginGetUseSolutionGraphDelegate == null)) {
                this.onBeginGetUseSolutionGraphDelegate = new BeginOperationDelegate(this.OnBeginGetUseSolutionGraph);
            }
            if ((this.onEndGetUseSolutionGraphDelegate == null)) {
                this.onEndGetUseSolutionGraphDelegate = new EndOperationDelegate(this.OnEndGetUseSolutionGraph);
            }
            if ((this.onGetUseSolutionGraphCompletedDelegate == null)) {
                this.onGetUseSolutionGraphCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUseSolutionGraphCompleted);
            }
            base.InvokeAsync(this.onBeginGetUseSolutionGraphDelegate, null, this.onEndGetUseSolutionGraphDelegate, this.onGetUseSolutionGraphCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GDMVisualization.ServiceReference1.IService1.BeginGetCurrentExperimentID(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCurrentExperimentID(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int GDMVisualization.ServiceReference1.IService1.EndGetCurrentExperimentID(System.IAsyncResult result) {
            return base.Channel.EndGetCurrentExperimentID(result);
        }
        
        private System.IAsyncResult OnBeginGetCurrentExperimentID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((GDMVisualization.ServiceReference1.IService1)(this)).BeginGetCurrentExperimentID(callback, asyncState);
        }
        
        private object[] OnEndGetCurrentExperimentID(System.IAsyncResult result) {
            int retVal = ((GDMVisualization.ServiceReference1.IService1)(this)).EndGetCurrentExperimentID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCurrentExperimentIDCompleted(object state) {
            if ((this.GetCurrentExperimentIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCurrentExperimentIDCompleted(this, new GetCurrentExperimentIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCurrentExperimentIDAsync() {
            this.GetCurrentExperimentIDAsync(null);
        }
        
        public void GetCurrentExperimentIDAsync(object userState) {
            if ((this.onBeginGetCurrentExperimentIDDelegate == null)) {
                this.onBeginGetCurrentExperimentIDDelegate = new BeginOperationDelegate(this.OnBeginGetCurrentExperimentID);
            }
            if ((this.onEndGetCurrentExperimentIDDelegate == null)) {
                this.onEndGetCurrentExperimentIDDelegate = new EndOperationDelegate(this.OnEndGetCurrentExperimentID);
            }
            if ((this.onGetCurrentExperimentIDCompletedDelegate == null)) {
                this.onGetCurrentExperimentIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrentExperimentIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetCurrentExperimentIDDelegate, null, this.onEndGetCurrentExperimentIDDelegate, this.onGetCurrentExperimentIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GDMVisualization.ServiceReference1.IService1.BeginInsertIntoExperimentActions(int ExperimentID, int PersonID, string VertexID, string Color, System.DateTime EventTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertIntoExperimentActions(ExperimentID, PersonID, VertexID, Color, EventTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GDMVisualization.ServiceReference1.IService1.EndInsertIntoExperimentActions(System.IAsyncResult result) {
            return base.Channel.EndInsertIntoExperimentActions(result);
        }
        
        private System.IAsyncResult OnBeginInsertIntoExperimentActions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int ExperimentID = ((int)(inValues[0]));
            int PersonID = ((int)(inValues[1]));
            string VertexID = ((string)(inValues[2]));
            string Color = ((string)(inValues[3]));
            System.DateTime EventTime = ((System.DateTime)(inValues[4]));
            return ((GDMVisualization.ServiceReference1.IService1)(this)).BeginInsertIntoExperimentActions(ExperimentID, PersonID, VertexID, Color, EventTime, callback, asyncState);
        }
        
        private object[] OnEndInsertIntoExperimentActions(System.IAsyncResult result) {
            bool retVal = ((GDMVisualization.ServiceReference1.IService1)(this)).EndInsertIntoExperimentActions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertIntoExperimentActionsCompleted(object state) {
            if ((this.InsertIntoExperimentActionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertIntoExperimentActionsCompleted(this, new InsertIntoExperimentActionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertIntoExperimentActionsAsync(int ExperimentID, int PersonID, string VertexID, string Color, System.DateTime EventTime) {
            this.InsertIntoExperimentActionsAsync(ExperimentID, PersonID, VertexID, Color, EventTime, null);
        }
        
        public void InsertIntoExperimentActionsAsync(int ExperimentID, int PersonID, string VertexID, string Color, System.DateTime EventTime, object userState) {
            if ((this.onBeginInsertIntoExperimentActionsDelegate == null)) {
                this.onBeginInsertIntoExperimentActionsDelegate = new BeginOperationDelegate(this.OnBeginInsertIntoExperimentActions);
            }
            if ((this.onEndInsertIntoExperimentActionsDelegate == null)) {
                this.onEndInsertIntoExperimentActionsDelegate = new EndOperationDelegate(this.OnEndInsertIntoExperimentActions);
            }
            if ((this.onInsertIntoExperimentActionsCompletedDelegate == null)) {
                this.onInsertIntoExperimentActionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertIntoExperimentActionsCompleted);
            }
            base.InvokeAsync(this.onBeginInsertIntoExperimentActionsDelegate, new object[] {
                        ExperimentID,
                        PersonID,
                        VertexID,
                        Color,
                        EventTime}, this.onEndInsertIntoExperimentActionsDelegate, this.onInsertIntoExperimentActionsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GDMVisualization.ServiceReference1.IService1.BeginAddParticipant(object turkId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddParticipant(turkId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int GDMVisualization.ServiceReference1.IService1.EndAddParticipant(System.IAsyncResult result) {
            return base.Channel.EndAddParticipant(result);
        }
        
        private System.IAsyncResult OnBeginAddParticipant(object[] inValues, System.AsyncCallback callback, object asyncState) {
            object turkId = ((object)(inValues[0]));
            return ((GDMVisualization.ServiceReference1.IService1)(this)).BeginAddParticipant(turkId, callback, asyncState);
        }
        
        private object[] OnEndAddParticipant(System.IAsyncResult result) {
            int retVal = ((GDMVisualization.ServiceReference1.IService1)(this)).EndAddParticipant(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddParticipantCompleted(object state) {
            if ((this.AddParticipantCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddParticipantCompleted(this, new AddParticipantCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddParticipantAsync(object turkId) {
            this.AddParticipantAsync(turkId, null);
        }
        
        public void AddParticipantAsync(object turkId, object userState) {
            if ((this.onBeginAddParticipantDelegate == null)) {
                this.onBeginAddParticipantDelegate = new BeginOperationDelegate(this.OnBeginAddParticipant);
            }
            if ((this.onEndAddParticipantDelegate == null)) {
                this.onEndAddParticipantDelegate = new EndOperationDelegate(this.OnEndAddParticipant);
            }
            if ((this.onAddParticipantCompletedDelegate == null)) {
                this.onAddParticipantCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddParticipantCompleted);
            }
            base.InvokeAsync(this.onBeginAddParticipantDelegate, new object[] {
                        turkId}, this.onEndAddParticipantDelegate, this.onAddParticipantCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GDMVisualization.ServiceReference1.IService1.BeginsetSessionVariable(string key, string value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsetSessionVariable(key, value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        object GDMVisualization.ServiceReference1.IService1.EndsetSessionVariable(System.IAsyncResult result) {
            return base.Channel.EndsetSessionVariable(result);
        }
        
        private System.IAsyncResult OnBeginsetSessionVariable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string value = ((string)(inValues[1]));
            return ((GDMVisualization.ServiceReference1.IService1)(this)).BeginsetSessionVariable(key, value, callback, asyncState);
        }
        
        private object[] OnEndsetSessionVariable(System.IAsyncResult result) {
            object retVal = ((GDMVisualization.ServiceReference1.IService1)(this)).EndsetSessionVariable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsetSessionVariableCompleted(object state) {
            if ((this.setSessionVariableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.setSessionVariableCompleted(this, new setSessionVariableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void setSessionVariableAsync(string key, string value) {
            this.setSessionVariableAsync(key, value, null);
        }
        
        public void setSessionVariableAsync(string key, string value, object userState) {
            if ((this.onBeginsetSessionVariableDelegate == null)) {
                this.onBeginsetSessionVariableDelegate = new BeginOperationDelegate(this.OnBeginsetSessionVariable);
            }
            if ((this.onEndsetSessionVariableDelegate == null)) {
                this.onEndsetSessionVariableDelegate = new EndOperationDelegate(this.OnEndsetSessionVariable);
            }
            if ((this.onsetSessionVariableCompletedDelegate == null)) {
                this.onsetSessionVariableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsetSessionVariableCompleted);
            }
            base.InvokeAsync(this.onBeginsetSessionVariableDelegate, new object[] {
                        key,
                        value}, this.onEndsetSessionVariableDelegate, this.onsetSessionVariableCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GDMVisualization.ServiceReference1.IService1.BeginInsertExperimentGraph(string graph_xml, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertExperimentGraph(graph_xml, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int GDMVisualization.ServiceReference1.IService1.EndInsertExperimentGraph(System.IAsyncResult result) {
            return base.Channel.EndInsertExperimentGraph(result);
        }
        
        private System.IAsyncResult OnBeginInsertExperimentGraph(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string graph_xml = ((string)(inValues[0]));
            return ((GDMVisualization.ServiceReference1.IService1)(this)).BeginInsertExperimentGraph(graph_xml, callback, asyncState);
        }
        
        private object[] OnEndInsertExperimentGraph(System.IAsyncResult result) {
            int retVal = ((GDMVisualization.ServiceReference1.IService1)(this)).EndInsertExperimentGraph(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertExperimentGraphCompleted(object state) {
            if ((this.InsertExperimentGraphCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertExperimentGraphCompleted(this, new InsertExperimentGraphCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertExperimentGraphAsync(string graph_xml) {
            this.InsertExperimentGraphAsync(graph_xml, null);
        }
        
        public void InsertExperimentGraphAsync(string graph_xml, object userState) {
            if ((this.onBeginInsertExperimentGraphDelegate == null)) {
                this.onBeginInsertExperimentGraphDelegate = new BeginOperationDelegate(this.OnBeginInsertExperimentGraph);
            }
            if ((this.onEndInsertExperimentGraphDelegate == null)) {
                this.onEndInsertExperimentGraphDelegate = new EndOperationDelegate(this.OnEndInsertExperimentGraph);
            }
            if ((this.onInsertExperimentGraphCompletedDelegate == null)) {
                this.onInsertExperimentGraphCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertExperimentGraphCompleted);
            }
            base.InvokeAsync(this.onBeginInsertExperimentGraphDelegate, new object[] {
                        graph_xml}, this.onEndInsertExperimentGraphDelegate, this.onInsertExperimentGraphCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GDMVisualization.ServiceReference1.IService1.BeginSolvedProblemGraph(int ParticipantID, bool Solved, System.DateTime SolvedTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSolvedProblemGraph(ParticipantID, Solved, SolvedTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GDMVisualization.ServiceReference1.IService1.EndSolvedProblemGraph(System.IAsyncResult result) {
            return base.Channel.EndSolvedProblemGraph(result);
        }
        
        private System.IAsyncResult OnBeginSolvedProblemGraph(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int ParticipantID = ((int)(inValues[0]));
            bool Solved = ((bool)(inValues[1]));
            System.DateTime SolvedTime = ((System.DateTime)(inValues[2]));
            return ((GDMVisualization.ServiceReference1.IService1)(this)).BeginSolvedProblemGraph(ParticipantID, Solved, SolvedTime, callback, asyncState);
        }
        
        private object[] OnEndSolvedProblemGraph(System.IAsyncResult result) {
            bool retVal = ((GDMVisualization.ServiceReference1.IService1)(this)).EndSolvedProblemGraph(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSolvedProblemGraphCompleted(object state) {
            if ((this.SolvedProblemGraphCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SolvedProblemGraphCompleted(this, new SolvedProblemGraphCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SolvedProblemGraphAsync(int ParticipantID, bool Solved, System.DateTime SolvedTime) {
            this.SolvedProblemGraphAsync(ParticipantID, Solved, SolvedTime, null);
        }
        
        public void SolvedProblemGraphAsync(int ParticipantID, bool Solved, System.DateTime SolvedTime, object userState) {
            if ((this.onBeginSolvedProblemGraphDelegate == null)) {
                this.onBeginSolvedProblemGraphDelegate = new BeginOperationDelegate(this.OnBeginSolvedProblemGraph);
            }
            if ((this.onEndSolvedProblemGraphDelegate == null)) {
                this.onEndSolvedProblemGraphDelegate = new EndOperationDelegate(this.OnEndSolvedProblemGraph);
            }
            if ((this.onSolvedProblemGraphCompletedDelegate == null)) {
                this.onSolvedProblemGraphCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSolvedProblemGraphCompleted);
            }
            base.InvokeAsync(this.onBeginSolvedProblemGraphDelegate, new object[] {
                        ParticipantID,
                        Solved,
                        SolvedTime}, this.onEndSolvedProblemGraphDelegate, this.onSolvedProblemGraphCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GDMVisualization.ServiceReference1.IService1.BeginSolutionAcceptancePartial(int ParticipantID, int ExperimentID, System.DateTime Date, bool AcceptedSolution, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSolutionAcceptancePartial(ParticipantID, ExperimentID, Date, AcceptedSolution, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GDMVisualization.ServiceReference1.IService1.EndSolutionAcceptancePartial(System.IAsyncResult result) {
            return base.Channel.EndSolutionAcceptancePartial(result);
        }
        
        private System.IAsyncResult OnBeginSolutionAcceptancePartial(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int ParticipantID = ((int)(inValues[0]));
            int ExperimentID = ((int)(inValues[1]));
            System.DateTime Date = ((System.DateTime)(inValues[2]));
            bool AcceptedSolution = ((bool)(inValues[3]));
            return ((GDMVisualization.ServiceReference1.IService1)(this)).BeginSolutionAcceptancePartial(ParticipantID, ExperimentID, Date, AcceptedSolution, callback, asyncState);
        }
        
        private object[] OnEndSolutionAcceptancePartial(System.IAsyncResult result) {
            bool retVal = ((GDMVisualization.ServiceReference1.IService1)(this)).EndSolutionAcceptancePartial(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSolutionAcceptancePartialCompleted(object state) {
            if ((this.SolutionAcceptancePartialCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SolutionAcceptancePartialCompleted(this, new SolutionAcceptancePartialCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SolutionAcceptancePartialAsync(int ParticipantID, int ExperimentID, System.DateTime Date, bool AcceptedSolution) {
            this.SolutionAcceptancePartialAsync(ParticipantID, ExperimentID, Date, AcceptedSolution, null);
        }
        
        public void SolutionAcceptancePartialAsync(int ParticipantID, int ExperimentID, System.DateTime Date, bool AcceptedSolution, object userState) {
            if ((this.onBeginSolutionAcceptancePartialDelegate == null)) {
                this.onBeginSolutionAcceptancePartialDelegate = new BeginOperationDelegate(this.OnBeginSolutionAcceptancePartial);
            }
            if ((this.onEndSolutionAcceptancePartialDelegate == null)) {
                this.onEndSolutionAcceptancePartialDelegate = new EndOperationDelegate(this.OnEndSolutionAcceptancePartial);
            }
            if ((this.onSolutionAcceptancePartialCompletedDelegate == null)) {
                this.onSolutionAcceptancePartialCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSolutionAcceptancePartialCompleted);
            }
            base.InvokeAsync(this.onBeginSolutionAcceptancePartialDelegate, new object[] {
                        ParticipantID,
                        ExperimentID,
                        Date,
                        AcceptedSolution}, this.onEndSolutionAcceptancePartialDelegate, this.onSolutionAcceptancePartialCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GDMVisualization.ServiceReference1.IService1.BeginPerformBulkCopy(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPerformBulkCopy(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GDMVisualization.ServiceReference1.IService1.EndPerformBulkCopy(System.IAsyncResult result) {
            return base.Channel.EndPerformBulkCopy(result);
        }
        
        private System.IAsyncResult OnBeginPerformBulkCopy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((GDMVisualization.ServiceReference1.IService1)(this)).BeginPerformBulkCopy(callback, asyncState);
        }
        
        private object[] OnEndPerformBulkCopy(System.IAsyncResult result) {
            bool retVal = ((GDMVisualization.ServiceReference1.IService1)(this)).EndPerformBulkCopy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPerformBulkCopyCompleted(object state) {
            if ((this.PerformBulkCopyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PerformBulkCopyCompleted(this, new PerformBulkCopyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PerformBulkCopyAsync() {
            this.PerformBulkCopyAsync(null);
        }
        
        public void PerformBulkCopyAsync(object userState) {
            if ((this.onBeginPerformBulkCopyDelegate == null)) {
                this.onBeginPerformBulkCopyDelegate = new BeginOperationDelegate(this.OnBeginPerformBulkCopy);
            }
            if ((this.onEndPerformBulkCopyDelegate == null)) {
                this.onEndPerformBulkCopyDelegate = new EndOperationDelegate(this.OnEndPerformBulkCopy);
            }
            if ((this.onPerformBulkCopyCompletedDelegate == null)) {
                this.onPerformBulkCopyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPerformBulkCopyCompleted);
            }
            base.InvokeAsync(this.onBeginPerformBulkCopyDelegate, null, this.onEndPerformBulkCopyDelegate, this.onPerformBulkCopyCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override GDMVisualization.ServiceReference1.IService1 CreateChannel() {
            return new Service1ClientChannel(this);
        }
        
        private class Service1ClientChannel : ChannelBase<GDMVisualization.ServiceReference1.IService1>, GDMVisualization.ServiceReference1.IService1 {
            
            public Service1ClientChannel(System.ServiceModel.ClientBase<GDMVisualization.ServiceReference1.IService1> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetExperimentGraph(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetExperimentGraph", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetExperimentGraph(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetExperimentGraph", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSessionVariable(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetSessionVariable", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetSessionVariable(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetSessionVariable", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSolutionGraph(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetSolutionGraph", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetSolutionGraph(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetSolutionGraph", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUseSolutionGraph(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetUseSolutionGraph", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetUseSolutionGraph(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetUseSolutionGraph", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCurrentExperimentID(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCurrentExperimentID", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetCurrentExperimentID(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetCurrentExperimentID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInsertIntoExperimentActions(int ExperimentID, int PersonID, string VertexID, string Color, System.DateTime EventTime, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = ExperimentID;
                _args[1] = PersonID;
                _args[2] = VertexID;
                _args[3] = Color;
                _args[4] = EventTime;
                System.IAsyncResult _result = base.BeginInvoke("InsertIntoExperimentActions", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndInsertIntoExperimentActions(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("InsertIntoExperimentActions", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddParticipant(object turkId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = turkId;
                System.IAsyncResult _result = base.BeginInvoke("AddParticipant", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAddParticipant(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("AddParticipant", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginsetSessionVariable(string key, string value, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = key;
                _args[1] = value;
                System.IAsyncResult _result = base.BeginInvoke("setSessionVariable", _args, callback, asyncState);
                return _result;
            }
            
            public object EndsetSessionVariable(System.IAsyncResult result) {
                object[] _args = new object[0];
                object _result = ((object)(base.EndInvoke("setSessionVariable", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInsertExperimentGraph(string graph_xml, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = graph_xml;
                System.IAsyncResult _result = base.BeginInvoke("InsertExperimentGraph", _args, callback, asyncState);
                return _result;
            }
            
            public int EndInsertExperimentGraph(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("InsertExperimentGraph", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSolvedProblemGraph(int ParticipantID, bool Solved, System.DateTime SolvedTime, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = ParticipantID;
                _args[1] = Solved;
                _args[2] = SolvedTime;
                System.IAsyncResult _result = base.BeginInvoke("SolvedProblemGraph", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSolvedProblemGraph(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SolvedProblemGraph", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSolutionAcceptancePartial(int ParticipantID, int ExperimentID, System.DateTime Date, bool AcceptedSolution, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = ParticipantID;
                _args[1] = ExperimentID;
                _args[2] = Date;
                _args[3] = AcceptedSolution;
                System.IAsyncResult _result = base.BeginInvoke("SolutionAcceptancePartial", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSolutionAcceptancePartial(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SolutionAcceptancePartial", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPerformBulkCopy(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("PerformBulkCopy", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndPerformBulkCopy(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("PerformBulkCopy", _args, result)));
                return _result;
            }
        }
    }
}
